#ifndef parse_argument_hsp_included
#define parse_argument_hsp_included

#module

/*
引数パーサの初期化を行う
引数
    argnum: プログラムが受け取るオプション以外の引数の数
    options: オプション仕様が記述された文字列
*/
#deffunc local parse_init int argnum, str options
    options_buf = options
    arg_num = argnum
    sdim argument_value, 256, argnum
    sdim option_name_short, 64, 64
    sdim option_name_long, 64, 64
    dim option_exist, 64
    dim option_arg_num, 64
    sdim option_value, 64, 64
    notesel options_buf
    repeat notemax
        noteget l, cnt
        split l, " ", option_name_short(cnt), option_name_long(cnt), num
        option_arg_num(cnt) = int(num)
        option_exist(cnt) = 0
    loop
    return

/*
コマンドライン引数を字句ごとに分割する
引数
    cmdline_buf: コマンドライン引数が格納された文字列変数
    splitted_cmdline: 分割された引数が格納される出力用の文字列型配列
*/
#deffunc split_args var cmdline_buf, array splitted_cmdline, local element_buf, local write_index, local cmdline_index, local str_start
    sdim element_buf, 256
    str_start = 0
    cmdline_index = 0
    write_index = 0
    repeat strlen(cmdline_buf)
        ch = peek(cmdline_buf, cnt)
        if ch == '"' || ch == '\'' {
            if str_start == ch {
                poke element_buf, write_index, 0
                splitted_cmdline(cmdline_index) = element_buf
                cmdline_index++
                write_index = 0
                str_start = 0
                continue
            } else : if str_start == 0 {
                str_start = ch
                continue
            }
        } else : if ch == ' ' {
            if str_start == 0 {
                if write_index != 0 {
                    poke element_buf, write_index, 0
                    splitted_cmdline(cmdline_index) = element_buf
                    cmdline_index++
                    write_index = 0
                }
                continue
            }
        }
        poke element_buf, write_index, ch
        write_index++
    loop
    if write_index != 0 {
        poke element_buf, write_index, 0
        splitted_cmdline(cmdline_index) = element_buf
        cmdline_index++
    }
    return cmdline_index

/*
コマンドライン引数をパースする
引数:
    argnum: プログラムが受け取るオプション以外の引数の数
    options: オプション仕様が記述された文字列
    cmdline: コマンドライン引数
*/
#deffunc parse_args int argnum, str options, str cmdline, local cmdline_buf
    parse_init argnum, options
    sdim splitted_cmdline, 256, 64
    cmdline_buf = cmdline
    split_args cmdline_buf, splitted_cmdline
    cmdline_num = stat
    arg_index = 0
    detected_args = 0
    repeat cmdline_num
        is_option = 0
        repeat length(option_name_short)
            if splitted_cmdline(arg_index) == option_name_short(cnt) || splitted_cmdline(arg_index) == option_name_long(cnt) {
                optname = splitted_cmdline(arg_index)
                optargnum = option_arg_num(cnt)
                if option_arg_num(cnt) {
                    option_value(cnt) = ""
                    cccnt = cnt
                    repeat option_arg_num(cnt)
                        arg_index++
                        if arg_index >= cmdline_num {
                            color_mes@ "hsptest: error: option " + optname + " requires " + optargnum + " arguments", 0, 4
                            end -1
                        }
                        option_value(cccnt) += splitted_cmdline(arg_index) + " "
                    loop
                    option_value(cnt) = strtrim(option_value(cnt))
                }
                option_exist(cnt) = 1
                is_option = 1
                break
            }
        loop
        if is_option == 0 {
            if detected_args >= arg_num {
                color_mes@ "hsptest: error: argument only " + arg_num + " required", 0, 4
                end -1
            }
            argument_value(detected_args) = splitted_cmdline(arg_index)
            detected_args++
        }
        arg_index++
    loop
    return

/*
引数を取得する
引数
    arg: 引数番号
返り値
    引数の値
*/
#defcfunc get_arg int arg
    return argument_value(arg)

/*
引数の数（オプションを除く）を返す
返り値
    引数の数
*/
#defcfunc get_arg_num
    return detected_args

/*
オプションがコマンドライン引数内に存在しているかを判定する
引数
    arg_name: オプション名
返り値
    オプションが存在している場合true
*/
#defcfunc is_exist_option str arg_name, local retval
    retval = 0
    repeat length(option_name_short)
        if arg_name == option_name_short(cnt) || arg_name == option_name_long(cnt) {
            retval = option_exist(cnt)
            break
        }
    loop
    return retval

/*
オプションに渡された引数を取得する
引数
    option_name: オプション名
返り値
    オプションに渡された引数
*/
#defcfunc get_option_arg str option_name, local retval
    retval = ""
    repeat length(option_name_short)
        if option_name == option_name_short(cnt) || option_name == option_name_long(cnt) {
            retval = option_value(cnt)
            break
        }
    loop
    return retval

#global

#endif