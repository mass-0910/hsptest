#ifndef console_hsp_included
#define console_hsp_included

#module

#define global FOREGROUND_BLUE      0x0001 // text color contains blue.
#define global FOREGROUND_GREEN     0x0002 // text color contains green.
#define global FOREGROUND_RED       0x0004 // text color contains red.
#define global FOREGROUND_WHITE     0x0007 // text color contains white.
#define global FOREGROUND_INTENSITY 0x0008 // text color is intensified.
#define global BACKGROUND_BLUE      0x0010 // background color contains blue.
#define global BACKGROUND_GREEN     0x0020 // background color contains green.
#define global BACKGROUND_RED       0x0040 // background color contains red.
#define global BACKGROUND_INTENSITY 0x0080 // background color is intensified.

/*
コンソール表示機能の初期化
*/
#deffunc console_init
    AllocConsole
    stdout_handle = GetStdHandle(-11)
    return

/*
コンソールに色付きで文字を出力する
引数
    mes_str: 出力する文字列
    option: mes命令に渡すオプション
    color_code: Windows APIで定義されているカラーコード
*/
#deffunc color_mes str mes_str, int option, int color_code
    SetConsoleTextAttribute stdout_handle, color_code
    mes mes_str, option
    SetConsoleTextAttribute stdout_handle, FOREGROUND_WHITE
    return

/*
コンソールの中央に表示する文字列を出力する
引数
    mes_str: 出力する文字列
    color_code: Windows APIで定義されているカラーコード
    fill_char: 空白部分に表示する文字
*/
#deffunc centered_mes str mes_str, int color_code, str fill_char
    cw = console_width()
    if int((cw - strlen(mes_str)) / 2) > 0 {
        repeat int((cw - strlen(mes_str)) / 2)
            color_mes fill_char, 1, color_code
        loop
    }
    color_mes mes_str, 1, color_code
    if int(cw - int((cw - strlen(mes_str)) / 2) - strlen(mes_str)) + 1 > 0 {
        repeat int(cw - int((cw - strlen(mes_str)) / 2) - strlen(mes_str)) + 1
            color_mes fill_char, 1, color_code
        loop
    }
    mes ""
    return

/*
コンソールに右詰めで表示する文字列を出力する
引数
    mes_str: 出力する文字列
    color_code: Windows APIで定義されているカラーコード
    new_line: 右詰め文字列を出力したあとに改行を行う場合trueを渡す
*/
#deffunc right_justified_mes str mes_str, int color_code, int newline
    cw = console_width()
    cx = console_x()
    if cw - cx - strlen(mes_str) + 1 > 0 {
        repeat cw - cx - strlen(mes_str) + 1
            mes " ", 1
        loop
    }
    if newline {
        color_mes mes_str, 0, color_code
    } else {
        color_mes mes_str, 1, color_code
        set_console_x cx
    }
    return

/*
コンソール画面の文字列幅を取得する
返り値
    コンソール画面の文字列幅
*/
#defcfunc console_width
    dim csbi, 6
    GetConsoleScreenBufferInfo stdout_handle, varptr(csbi)
    return wpeek(csbi, 14)

/*
コンソールの現在の出力位置のx座標を取得する
返り値
    コンソールの現在の出力位置のx座標
 */
#defcfunc console_x
    dim csbi, 6
    GetConsoleScreenBufferInfo stdout_handle, varptr(csbi)
    return wpeek(csbi,4)

/*
コンソールの出力位置のx座標を設定する
引数
    x: コンソールの出力位置のx座標
*/
#deffunc set_console_x int x
    dim csbi, 6
    pos_buf = 0
    GetConsoleScreenBufferInfo stdout_handle, varptr(csbi)
    y = wpeek(csbi,6)
    wpoke pos_buf, 0, x
    wpoke pos_buf, 2, y
    SetConsoleCursorPosition stdout_handle, pos_buf
    return

#global

#endif
