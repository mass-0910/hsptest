#runtime "hsp3cl"
#packopt name "hsptest"
#packopt orgpath 1
#packopt version "VERSION"
#include "exception_code.as"
#include "hspext.as"
#include "hspcmp.as"
#include "make_testcall_script.hsp"
#include "result_format.as"
#uselib "winmm.dll"
#cfunc timeGetTime "timeGetTime"

sdim stdout, 20000
sdim ln, 20000

test_pass = 0
test_fail = 0

// correct test code
if dirinfo(4) != "" : chdir dirinfo(4)
dirlist testcodes, "*.hsp", 1
notesel testcodes
file_num = noteinfo(0)

// output first message
hspver_str = strf("%4x", hspver)
mes "HSP ", 1
repeat 4
    mes strmid(hspver_str, cnt, 1), 1
    if cnt == 3: mes ", ", 1 : break
    mes ".", 1
loop
mes "hsptest 0.4"

start_time = timeGetTime()

repeat file_num

    // continue if file is not test
    notesel testcodes
    noteget file_name, cnt
    if instr(file_name, 0, "test") == -1 : continue

    notesel testcode_buf
    noteload file_name

    repeat

        // get test labels
        notesel testcode_buf
        l = notefind("*test", 1)
        noteget label_name, l
        test_name = strmid(label_name, 1, 1024)
        if l == -1 : break
        notedel l

        // make temporary testcall script
        temptest_path = make_temp_test(file_name, label_name)

        // compile test
        hsc_ini temptest_path
        hsc_compath dirinfo(1) + "\\common\\"
        hsc_comp 1, 0, 0
        hsc_getmes stdout
        hsc_bye
        if instr(stdout, 0, "#No error detected.") == -1 {
            strrep stdout, "\n", "\nhspcmp:"
            mes test_name + "@" + file_name + ": FAIL: compile error"
            mes "hspcmp:" + stdout
            test_fail++
            continue
        }

        // execute test
        hsp3cl_runtime = dirinfo(1) + "\\hsp3cl.exe " + getpath(temptest_path, 1) + ".ax"
        stdout = ""
        ln = ""
        pipeexec stdout, hsp3cl_runtime
        repeat
            pipeget ln
            if stat == 0 : break
            wait 1
        loop

        // correct result
        parse_result_format stdout, result, errline, errdetail, stdout
        strrep stdout, "\n", "\n" + label_name + ":"
        stdout = label_name + ":" + stdout

        // output result
        if result == "PASS" {
            mes test_name + "@" + file_name + ":" + " PASS"
            test_pass++
        } else {
            mes test_name + "@" + file_name + ":" + " FAIL at line " + errline + ": " + errdetail
            test_fail++
        }

        // delete temporary testcall script
        delete_temp_test
    loop
loop

spend_time = strf("%.2f", double(timeGetTime() - start_time) / 1000.0)

if test_pass == 0 && test_fail == 0 {
    mes "======= no tests ran in " + spend_time + " seconds =========="
} else : if test_fail == 0 {
    mes "======= all " + str(test_pass) + " passed in " + spend_time + " seconds ======="
} else {
    mes "======= " + str(test_fail) + " failed, " + str(test_pass) + " passed in " + spend_time + " seconds ======="
}

end test_fail