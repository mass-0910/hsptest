#runtime "hsp3cl"
#packopt name "hsptest"
#packopt orgpath 1
#packopt version "VERSION"
#include "hspdef.as"
#include "exception_code.as"
#include "hspext.as"
#include "hspcmp.as"
#include "kernel32.as"
#include "mod_regexp.as"
#include "result_format.as"
#include "argparse.hsp"
#include "make_testcall_script.hsp"
#include "console.hsp"
#include "logfile.hsp"
#include "parse_result.hsp"
#include "util.hsp"
#include "annotation.hsp"
#include "script_tool.hsp"
#uselib "winmm.dll"
#cfunc timeGetTime "timeGetTime"

version = "0.7"

sdim stdout, 2000
sdim ln, 2000

test_pass = 0
test_fail = 0
test_ignore = 0

// initialize console output
console_init

// correct test code
options = {"
-v --verbose 0
-s --stdout 0
-l --logfile 1
-h --help 0
-r --runtime 1
--version --version 0
"}
parse_args 1, options, dir_cmdline

// show usage
if is_exist_option("--help") {
    mes "usage: hsptest [options] [path_to_test_dir]"
    mes ""
    mes "arguments:"
    mes "  path_to_test_dir       the path to the directory containing the files you want to run the tests"
    mes ""
    mes "options:"
    mes "  -v, --verbose          print the result for each test"
    mes "  -s, --stdout           display captured stdout while test"
    mes "  -l, --logfile LOGPATH  write the log file to LOGPATH"
    mes "  -r, --runtime RUNTIME  specify runtime to run tests"
    mes "  -h, --help             show this help message"
    mes "  --version              show hsptest version"
    end
}

// show version
if is_exist_option("--version") {
    mes "hsptest " + version
    end
}

// exit if runtime name is invalid
if is_exist_option("--runtime") && is_valid_runtime_name(get_option_arg("--runtime")) == 0 {
    color_mes "hsptest: error: " + get_option_arg("--runtime") + " is invalid runtime name", 0, FOREGROUND_RED
    end -1
}

// change cwd to test directory
first_cwd = dir_cur
if get_arg(0) != "" : chdir get_arg(0)
dirlist testcodes, "*.hsp", 1
notesel testcodes
file_num = notemax

// output first message
centered_mes " test session starts ", FOREGROUND_WHITE, "="
hspver_str = get_runtime_ver()
tmpstr = ""
repeat 4
    tmpstr += strmid(hspver_str, cnt, 1)
    if cnt == 3 : break
    tmpstr += "."
loop
hspver_str = tmpstr
mes "HSP " + hspver_str + ", hsptest " + version

label_pattern = "^(?:.*:)?[ \\t]*(\\*test\\w*)[^\\r]*$"

// count test num
all_test_num = 0
repeat file_num
    notesel testcodes
    noteget file_name, cnt
    if strlen(match(file_name, "test")) == 0 : continue
    notesel testcode_buf
    noteload file_name
    remove_comment tmp, testcode_buf
    testcode_buf = tmp
    repeat
        matches label_match, testcode_buf, label_pattern, 0, 1, 0
        if stat == 0 : break
        notesel testcode_buf
        l = notefind(label_match(0), 0)
        notedel l
        all_test_num++
    loop
loop

sdim stdout_buf, 2000, all_test_num
sdim stdout_file_name, 256, all_test_num
sdim stdout_test_name, 64, all_test_num
sdim error_file_buf, 64, all_test_num
sdim error_detail_buf, 64, all_test_num
dim error_line_buf, all_test_num
dim stdout_result, all_test_num
sdim callstack_buf, 64, 1024, all_test_num

mes "collected " + all_test_num + " tests"
mes ""

test_num = 0

start_time = timeGetTime()

repeat file_num

    // continue if file is not test
    notesel testcodes
    noteget file_name, cnt
    if strlen(match(file_name, "test")) == 0 : continue

    notesel testcode_buf
    noteload file_name
    remove_comment tmp, testcode_buf
    testcode_buf = tmp

    if is_exist_option("--verbose") == 0 : mes file_name + " ", 1

    repeat

        // get test labels
        matches label_match, testcode_buf, label_pattern, 0, 1, 0
        if stat == 0 : break
        notesel testcode_buf
        l = notefind(label_match(0), 0)
        label_name = label_match(0, 1)
        test_name = strmid(label_name, 1, 1024)
        notedel l

        // get annotations
        annotation_init
        notesel testcode_buf
        if l - 1 >= 0 {
            noteget annotation_line, l - 1
            annotation_parse annotation_line
        }

        // select runtime
        runtime_name = get_annotation_attr_val("runtime")
        if runtime_name == "default" {
            if is_exist_option("--runtime") {
                runtime_name = get_option_arg("--runtime")
            } else {
                runtime_name = "hsp3cl"
            }
        }

        // continue next test if ignored
        if get_annotation_attr_val("ignore") == "true" || is_valid_runtime_name(runtime_name) == 0 {
            if is_valid_runtime_name(runtime_name) == 0 {
                color_mes "hsptest: error: " + runtime_name + " is invalid runtime name", 0, FOREGROUND_RED
            }
            stdout_file_name(test_num) = file_name
            stdout_test_name(test_num) = test_name
            if is_exist_option("--verbose") {
                mes file_name + "::" + test_name + ": ", 1
                color_mes "IGNORED", 1, FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY
                right_justified_mes "[" + strf("%3d", int((double(test_num + 1) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 1
            } else {
                color_mes "-", 1, FOREGROUND_GREEN | FOREGROUND_BLUE
                right_justified_mes "[" + strf("%3d", int((double(test_num + 1) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 0
            }
            stdout_result(test_num) = 2
            test_num++
            test_ignore++
            continue
        }

        // make temporary testcall script
        temptest_path = make_temp_test(file_name, label_name, runtime_name)

        // compile test
        hsc_ini temptest_path
        hsc_compath dir_exe + "\\common\\"
        hsc_comp 1, 0, 0
        hsc_getmes stdout
        hsc_bye
        if instr(stdout, 0, "#No error detected.") == -1 {
            strrep stdout, "\n", "\nhspcmp:"
            mes test_name + "@" + file_name + ": FAIL: compile error"
            mes "hspcmp:" + stdout
            test_fail++
            delete_temp_test
            continue
        }

        // execute test
        hsp3cl_runtime = dir_exe + "\\" + runtime_name + ".exe " + getpath(temptest_path, 1) + ".ax"
        stdout = ""
        ln = ""
        pipeexec stdout, hsp3cl_runtime
        repeat
            pipeget ln
            if stat == 0 : break
            wait 1
        loop

        // collect result
        sdim callstack, 64, 1024
        parse_result_format stdout, result, errline, errfile, errdetail, stdout, callstack
        stdout_buf(test_num) = stdout
        stdout_file_name(test_num) = file_name
        stdout_test_name(test_num) = test_name
        error_file_buf(test_num) = errfile
        error_line_buf(test_num) = int(errline)
        error_detail_buf(test_num) = errdetail
        repeat 1024
            if callstack(cnt) == "" : break
            callstack_buf(cnt, test_num) = callstack(cnt)
        loop

        // output result
        test_num++
        if is_exist_option("--verbose") {
            mes file_name + "::" + test_name + ": ", 1
            if result == "PASS" {
                color_mes "PASSED", 1, FOREGROUND_GREEN | FOREGROUND_INTENSITY
            } else {
                color_mes "FAILED at line " + errline + " of " + errfile + ": " + errdetail, 1, FOREGROUND_RED | FOREGROUND_INTENSITY
            }
            right_justified_mes "[" + strf("%3d", int((double(test_num) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 1
        } else {
            if result == "PASS" {
                color_mes ".", 1, FOREGROUND_GREEN
            } else {
                color_mes "F", 1, FOREGROUND_RED | FOREGROUND_INTENSITY
            }
            right_justified_mes "[" + strf("%3d", int((double(test_num) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 0
        }
        if result == "PASS" {
            test_pass++
        } else {
            test_fail++
            stdout_result(test_num - 1) = 1
        }

        // delete temporary testcall script
        delete_temp_test
    loop
    if is_exist_option("--verbose") == 0 : mes ""
loop

if is_exist_option("--stdout") {
    stdout_exist = 0
    repeat all_test_num
        if stdout_buf(cnt) != "" {
            stdout_exist = 1
            centered_mes " Captured stdout call in " + stdout_file_name(cnt) + "::" + stdout_test_name(cnt) + " ", FOREGROUND_WHITE, "-"
            mes stdout_buf(cnt)
        }
    loop
    if stdout_exist {
        centered_mes "", FOREGROUND_WHITE, "-"
    } else {
        centered_mes " no stdout captured ", FOREGROUND_WHITE, "-"
    }
}

spend_time = strf("%.2f", double(timeGetTime() - start_time) / 1000.0)

mes ""
if is_exist_option("--logfile") {
    init_logfile_module hspver_str, version, dir_cur
    logfile_path = get_option_arg("--logfile")
    repeat all_test_num
        append_result_log stdout_file_name(cnt), stdout_test_name(cnt), stdout_result(cnt)
        if stdout_buf(cnt) != "" : append_stdout_log stdout_file_name(cnt), stdout_test_name(cnt), stdout_buf(cnt)
        sdim callstack, 64, 1024
        ccnt = cnt
        repeat 1024
            if callstack_buf(cnt, ccnt) == "" : break
            callstack(cnt) = callstack_buf(cnt, ccnt)
        loop
        if stdout_result(cnt) == 1 : append_detail_log stdout_file_name(cnt), stdout_test_name(cnt), error_file_buf(cnt), error_line_buf(cnt), error_detail_buf(cnt), callstack
    loop
    chdir first_cwd
    make_logfile logfile_path
    mes "output the log file to " + dir_cur + "\\" + logfile_path
}

if test_pass == 0 && test_fail == 0 {
    if test_ignore {
        centered_mes " no tests ran in " + spend_time + " seconds ( " + test_ignore + " tests ignored ) ", FOREGROUND_WHITE, "="
    } else {
        centered_mes " no tests ran in " + spend_time + " seconds ", FOREGROUND_WHITE, "="
    }
} else : if test_fail == 0 {
    if test_ignore {
        centered_mes " all " + str(test_pass) + " passed in " + spend_time + " seconds ( " + test_ignore + " tests ignored ) ", FOREGROUND_GREEN, "="
    } else {
        centered_mes " all " + str(test_pass) + " passed in " + spend_time + " seconds ", FOREGROUND_GREEN, "="
    }
} else {
    if test_ignore {
        centered_mes " " + str(test_fail) + " failed, " + str(test_pass) + " passed, " + test_ignore + " ignored in " + spend_time + " seconds ", FOREGROUND_RED, "="
    } else {
        centered_mes " " + str(test_fail) + " failed, " + str(test_pass) + " passed in " + spend_time + " seconds ", FOREGROUND_RED, "="
    }
}

end test_fail