#runtime "hsp3cl"
#packopt name "hsptest"
#packopt orgpath 1
#packopt version "VERSION"
#include "hspdef.as"
#include "exception_code.as"
#include "hspext.as"
#include "hspcmp.as"
#include "kernel32.as"
#include "result_format.as"
#include "argparse.hsp"
#include "make_testcall_script.hsp"
#include "console.hsp"
#uselib "winmm.dll"
#cfunc timeGetTime "timeGetTime"

sdim stdout, 20000
sdim ln, 20000

test_pass = 0
test_fail = 0

// initialize console output
console_init

// correct test code
options = {"
-v --verbose 0
-s --stdout 0
-l --logfile 1
-h --help 0
"}
parse_init 1, options
parse_args dir_cmdline
if get_arg(0) != "" : chdir get_arg(0)
dirlist testcodes, "*.hsp", 1
notesel testcodes
file_num = notemax

// output first message
equal_rounded_mes " test session starts ", FOREGROUND_WHITE
hspver_str = strf("%4x", hspver)
mes "HSP ", 1
repeat 4
    mes strmid(hspver_str, cnt, 1), 1
    if cnt == 3: mes ", ", 1 : break
    mes ".", 1
loop
mes "hsptest 0.5"

// count test num
all_test_num = 0
repeat file_num
    notesel testcodes
    noteget file_name, cnt
    if instr(file_name, 0, "test") == -1 : continue
    notesel testcode_buf
    noteload file_name
    repeat
        notesel testcode_buf
        l = notefind("*test", 1)
        if l == -1 : break
        notedel l
        all_test_num++
    loop
loop

mes "collected " + all_test_num + " tests"
mes ""

test_num = 0

start_time = timeGetTime()

repeat file_num

    // continue if file is not test
    notesel testcodes
    noteget file_name, cnt
    if instr(file_name, 0, "test") == -1 : continue

    notesel testcode_buf
    noteload file_name

    if is_exist_option("--verbose") == 0 : mes file_name + " ", 1

    repeat

        // get test labels
        notesel testcode_buf
        l = notefind("*test", 1)
        noteget label_name, l
        test_name = strmid(label_name, 1, 1024)
        if l == -1 : break
        notedel l

        // make temporary testcall script
        temptest_path = make_temp_test(file_name, label_name)

        // compile test
        hsc_ini temptest_path
        hsc_compath dir_exe + "\\common\\"
        hsc_comp 1, 0, 0
        hsc_getmes stdout
        hsc_bye
        if instr(stdout, 0, "#No error detected.") == -1 {
            strrep stdout, "\n", "\nhspcmp:"
            mes test_name + "@" + file_name + ": FAIL: compile error"
            mes "hspcmp:" + stdout
            test_fail++
            delete_temp_test
            continue
        }

        // execute test
        hsp3cl_runtime = dir_exe + "\\hsp3cl.exe " + getpath(temptest_path, 1) + ".ax"
        stdout = ""
        ln = ""
        pipeexec stdout, hsp3cl_runtime
        repeat
            pipeget ln
            if stat == 0 : break
            wait 1
        loop

        // correct result
        parse_result_format stdout, result, errline, errfile, errdetail, stdout
        strrep stdout, "\n", "\n" + label_name + ":"
        stdout = label_name + ":" + stdout

        // output result
        test_num++
        if is_exist_option("--verbose") {
            mes file_name + "::" + test_name + ": ", 1
            if result == "PASS" {
                color_mes "PASSED", 1, FOREGROUND_GREEN | FOREGROUND_INTENSITY
            } else {
                color_mes "FAILED at line " + errline + " of " + errfile + ": " + errdetail, 1, FOREGROUND_RED | FOREGROUND_INTENSITY
            }
            right_justified_mes "[" + strf("%3d", int((double(test_num) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 1
        } else {
            if result == "PASS" {
                color_mes ".", 1, FOREGROUND_GREEN
            } else {
                color_mes "F", 1, FOREGROUND_RED | FOREGROUND_INTENSITY
            }
            right_justified_mes "[" + strf("%3d", int((double(test_num) / double(all_test_num)) * 100.0)) + "%]", FOREGROUND_GREEN, 0
        }
        if result == "PASS" {
            test_pass++
        } else {
            test_fail++
        }

        // delete temporary testcall script
        delete_temp_test
    loop
    if is_exist_option("--verbose") == 0 : mes ""
loop

spend_time = strf("%.2f", double(timeGetTime() - start_time) / 1000.0)

mes ""
if test_pass == 0 && test_fail == 0 {
    equal_rounded_mes " no tests ran in " + spend_time + " seconds ", FOREGROUND_WHITE
} else : if test_fail == 0 {
    equal_rounded_mes " all " + str(test_pass) + " passed in " + spend_time + " seconds ", FOREGROUND_GREEN
} else {
    equal_rounded_mes " " + str(test_fail) + " failed, " + str(test_pass) + " passed in " + spend_time + " seconds ", FOREGROUND_RED
}

end test_fail