#ifndef make_testcall_script_hsp_included
#define make_testcall_script_hsp_included

#include "kernel32.as"
#include "append_data.hsp"

#module

/*
一時ディレクトリ内の構成を守るためのフォルダを追加で作成する
例えば、#include "path/to/module.as"と記述されていた場合、"path/to"フォルダを作成する
引数
    path: フォルダを含むファイルへのパス
*/
#deffunc local make_folder_in_path str path, local parent, local buf, local buf_size
    parent = getpath(path, 32)
    strrep parent, "/", "\\"
    parent = strtrim(parent, 2, '\\')
    if parent == "" : return
    make_folder_in_path parent
    dirlist2h@ 1
    dirlist2@ buf_size, "*", 1 | 2, '\\'
    sdim buf, buf_size + 1
    dirlist2r@ buf
    if instr(buf, 0, temp_test_env_dir + "\\" + parent) == -1 {
        mkdir temp_test_env_dir + "\\" + parent
    }
    return

/*
テストスクリプト内で呼び出されたスクリプトファイルを一時フォルダにコピーする
引数
    file_name: includeを検出するファイルの名前
    init: 再帰関数のエントリ時に1にする引数
*/
#deffunc local copy_included_test_file_to_temp_dir str file_name, int init, local test_script_buf, local file_line_num, local l, local addinst, local index, local copy_file_name
    notesel test_script_buf
    noteload file_name
    file_line_num = notemax
    repeat file_line_num
        notesel test_script_buf
        noteget l, cnt
        if init {
            addinst_buf = "#include #addition #uselib #pack #epack"
            split addinst_buf, " ", addinst_list
        }
        repeat length(addinst_list)
            index = instr(l, 0, addinst_list(cnt))
            if index != -1 {
                // includeされるファイル名を抽出
                addinst = addinst_list(cnt)
                index += strlen(addinst)
                getstr copy_file_name, l, index, '"', 1024
                index += strsize
                getstr copy_file_name, l, index, '"', 1024
                strrep copy_file_name, "\\\\", "\\"
                // コピーするファイル名がパス表現のとき、再現フォルダを作成
                if getpath(copy_file_name, 32) != "" {
                    make_folder_in_path copy_file_name
                }
                // カレントディレクトリ内に存在しないとき無視
                exist copy_file_name
                if strsize == -1 : break
                // commonフォルダに存在する既存スクリプトの場合無視
                exist dir_exe + "\\common\\" + copy_file_name
                if strsize != -1 : break
                // 既に一時フォルダに存在するとき無視
                exist temp_test_env_dir + "\\" + copy_file_name
                if strsize != -1 : break
                // コピーした後に更にincludeされるスクリプト内でincludeされるスクリプトを探す
                copy_with_edit copy_file_name, temp_test_env_dir + "\\" + copy_file_name
                copy_included_test_file_to_temp_dir copy_file_name, 0
                break
            }
        loop
    loop
    return

#deffunc copy_file_used_in_test local file_num
    dirlist2h@ 1
    dirlist2@ path_buf_size, "*", 1, '\\'
    sdim path_buf, path_buf_size + 1
    dirlist2r@ path_buf
    notesel path_buf
    file_num = notemax
    repeat file_num
        notesel path_buf
        noteget path, cnt
        exist path
        if strsize != -1 {
            if instr(path, 0, temp_test_env_dir) != -1 : continue
            if getpath(path, 32) != "" {
                make_folder_in_path path
            }
            if getpath(path, 2) == ".hsp" || getpath(path, 2) == ".as" {
                copy_with_edit path, temp_test_env_dir + "\\" + path
            } else {
                bcopy path, temp_test_env_dir + "\\" + path
            }
        }
    loop
    return

/*
テストスクリプトを生成する
引数
    testfile_name: スクリプト内でincludeされるテストスクリプト名
    testlabel_name: スクリプト内でincludeされるテストサブルーチンラベル名
返り値
    str: テストスクリプトが保存されたファイルへのパス
 */
#defcfunc make_temp_test str testfile_name, str testlabel_name
    temp_test_name = "__testtmp.hsp"
    temp_test_env_dir = "__tmpenv"
    generated_code_buf = "goto *__start\n"
    generated_code_buf += "#include \"test.as\"\n"
    generated_code_buf += "#include \"" + testfile_name + "\"\n"
    generated_code_buf += "*__start\n"
    generated_code_buf += "gosub *__testinit\n"
    generated_code_buf += "gosub " + testlabel_name + "\n"
    generated_code_buf += "mes get_pass_result_format()\n"
    generated_code_buf += "end 1"
    notesel generated_code_buf
    notesave temp_test_name
    mkdir temp_test_env_dir
    copy_with_edit temp_test_name, temp_test_env_dir + "\\" + temp_test_name
    ; copy_included_test_file_to_temp_dir temp_test_name, 1
    copy_file_used_in_test
    delete temp_test_name
    chdir temp_test_env_dir
    return temp_test_name

/*
渡したフォルダの中身を全て削除する
引数
    path_to_dir: 中身を空にしたいフォルダへのパス
*/
#deffunc local delete_all_file str path_to_dir, local now_cwd, local dirs, local dir_num, local files, local file_num, local name
    // 指定したフォルダ内に移動
    now_cwd = dir_cur
    chdir path_to_dir
    // フォルダをまず削除
    dirlist dirs, "*", 5
    dir_num = stat
    repeat dir_num
        notesel dirs
        noteget name, cnt
        delete_all_file name
        RemoveDirectory name
    loop
    // ファイルを削除
    dirlist files, "*", 1
    file_num = stat
    repeat file_num
        notesel files
        noteget name, cnt
        delete name
    loop
    // 元のフォルダに帰る
    chdir now_cwd
    return

/*
テストスクリプトおよびaxファイルを削除する
 */
#deffunc delete_temp_test
    chdir ".."
    delete_all_file temp_test_env_dir
    RemoveDirectory temp_test_env_dir
    return

#global

#endif
